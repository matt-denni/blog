---
title: "Blogging with Quarto"
author: "Matt Dennis"
date: "2022-07-18"
categories: [quarto]
image: "quarto-blog-create.jpeg"
execute:
  freeze: auto
---

I've built this blog using RStudio's Quarto publishing system. In this post, I'll explain what I did.

> Note: This is a high level overview.  For more details, refer to the [Quarto documentation](https://quarto.org/).

## Installation

Quarto allows you to create dynamic content using R, Python, Julia or Observable.  I do most of my data science work in R, in RStudio, on my MacBook Pro or Linux Ubuntu machine.  I already had R and RStudio installed on both machines.

To install quarto, you can visit [this page](https://quarto.org/docs/get-started) and choose the correct installation file for your operating system.  I didn't do this though.  On my Mac, I prefer to install software via homebrew, if possible. So I did this:

```
brew install --cask quarto
```

I haven't installed quarto on my Ubuntu machine just yet.

## Create the blog

Once you've got quarto installed, it's time to create the blog.

If you're working in RStudio, like I am, you've got two options here:

1. Use `File > New Project > New Directory > Quarto Blog` inside RStudio.
2. Run the following command in your terminal:

```
quarto create-project myblog --type website:blog
```

This command will create a blog called `myblog` in your current working directory.  You can, of course, substitute `myblog` with another preferred blog name.

I chose option number 1.  Quarto created an R project file for me, and it also gave me the option to initialize a Git repository at the same time, which I gladly accepted.

## Project files and directories

The quarto project was then initialized.  A number of project files and directories were created.  Here's a brief explanation of the purpose of some of these:

`_quarto.yml` is the quarto project file, where you can specify several parameters, such as the blog name, Twitter and LinkedIn addresses, blog theme etc.  This is also where you specify the output directory for all rendered quarto posts.

`index.qmd` is used to configure the blog home page, where all the quarto posts are listed.

`about.qmd` is where the information about the blog and its author goes.

The `posts/` directory is where the individual blog posts live.

In `posts/_metadata.yml`, you can configure options for how your posts should be rendered.  

You can specify custom CSS styles in `styles.css`.

## Create a new post

To create a new post, create a sub-directory within the `posts/` directory.  Then, create a file called `index.qmd`.  

You'll want to start your post with a YAML header that looks something like this:

```
---
title: "How to create a blog using quarto"
author: "Matt Dennis"
date: "2022-07-18"
categories: [quarto]
image: "quarto-blog-create.jpeg"
draft: true
---
```

Quarto will automatically tag your post with the entries specified next to `categories`.  By default, these tags show up on the home page in a nice organised way.

The `image` parameter is used to set the image that will appear next to the title of this post on the home page.  The file that it references should be in the same directory as `index.qmd`.

When `draft` is set to `true`, the post will not be included in the listing, site map, or site search, even when rendered.  This is useful if you want to push new posts to a live site without making them visible until they are complete.  Set this parameter to `false` when you're ready to publish the post.

## Rendering & previewing

To render all posts in the blog, use the following command:

```
quarto render
```

Once you've done this, you can preview your blog in a web browser by running the following command:

```
quarto preview
```

Every time you save new changes to a file in `posts/`, the preview will update accordingly.  To stop the preview, just terminate the process (`Ctrl+C`).

## Publishing to GitHub

It's really easy to publish to GitHub.  

Make sure that the following directories are not in version control:

1. `/.quarto/`
2. `_site/`
3. `docs/` (this is the output directory I have specified in `_quarto.yml`)

There are two options, publish manually or automatically.

### Manually publish

First, create a `gh-pages` branch.  Then, in GitHub under `Settings > Pages`, select the `gh-pages` branch to be the source branch, and the root folder to be the source folder.  

Then, run the following command to publish to a GitHub pages site:

```
quarto publish gh-pages
```

This will publish the currently rendered site to GitHub pages.

### Automatically publish via a GitHub Actions workflow

I prefer this option.  First, create a GitHub workflows sub-directory at this location: `.github/workflows/`.  Within this directory, you need to create a GitHub workflow file.  You can take a look at what mine looks like in the repository - it's called `publish.yml`.  I've just copied mine verbatim from [here](https://quarto.org/docs/publishing/github-pages.html#publish-action).

One of the downsides of using GitHub Actions is that you have to re-create your development environment on the virtual machine that will execute it (or risk having failed jobs in your GitHub workflow).  Fortunately, the `{renv}` package makes this very easy.

To use `{renv}`, you'll need to make use of the following two commands:

```
# Initialise virtual environment
renv::init()
# Take a snapshot of current environment
renv::snapshot()
```

These commands create and update `renv.lock` with the list of required packages and their versions.  `renv.lock` should be version controlled, as it will be used to create the virtual environment when the GitHub workflow is executed.

## Freeze

There are times when you probably don't want to re-render old posts.  In fact, it's probably only useful to have old posts re-render if you want your post to reflect changes in the underlying data.  

You can "freeze" posts by specifying the following option in the YAML header of a post:

```
execute:
  freeze: true
```

It's probably more useful to apply this as a general rule, which you can do in `posts/_metadata.yml`.  Just paste `freeze: true` into that file, and it will automatically prevent all rendered posts from being re-rendered, unless `freeze: auto` is specified in a certain post.  The `auto` option will cause the post to be re-rendered only if there is a change to the post.

All "frozen" posts are stored in the `_freeze/` directory.  You can remove old frozen posts by deleting them from this folder.
