{
  "hash": "3b39825f5615c0cd5bd0488dbeaabfa2",
  "result": {
    "markdown": "---\ntitle: \"Measures of centre and spread\"\nauthor: \"Matt Dennis\"\ndate: \"2022-05-16\"\ncategories: [statistics]\nimage: \"image.jpg\"\n---\n\n\n## Measures of centre\n\nIn statistics, the two most common examples of measures of centre are the *mean* and *median*.  Another (less commonly used) measure of centre is the *mode*.  In this post, I will discuss the mean and median.  \n\n### Mean\n\nThe mean value of a series of numbers is also often called the *average*.  In mathematical notation, the mean is often denoted as $\\overline{x}$.  It is calculated by adding all the numbers in the series together, and then dividing that by the number of numbers in the series.\n\nThere are a number of different forms of the mean: arithmetic, weighted, geometric and harmonic.  Generally, when most people talk about the mean without specifying a type, they are referring to the arithmetic mean, which is what is discussed below.  In a future post, I will look at the other forms of the mean (and where you might want to use them).\n\n#### Arithmetic mean\n\nHere's an example of how one might calculate the (arithmetic) mean in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1 + 2 + 3 + 4) / 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n\nFortunately, there is an easier way to do this.  In R, you can make use of the `mean()` function to get the same result.  In the code below, The `c()` function collects a series of values into a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(1, 2, 3, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n\nWe can ask R to check that both calculations return the same value by using the `==` operator, which means 'is equal to'.  If both approaches return the same value, then R will print a result `TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1 + 2 + 3 + 4) / 4 == mean(c(1, 2, 3, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### Median\n\nThe median is the 'mid-point' in a series of values.  To calculate the median, first order all of the numbers in a series from smallest to largest.\n\nIf there is an odd number of elements in the series, then there will be one value exactly in the middle of the series.  The median can be calculated as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code generates 5 random integers between 1 and 100\nseries_odd <- floor(runif(n = 5, min = 1, max = 100))\n\n# Sort the series from smallest to largest\nseries_odd <- sort(series_odd)\n\n# Print the series\nseries_odd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2 40 47 48 76\n```\n:::\n\n```{.r .cell-code}\n# Find the median for an odd number of elements\nseries_odd[(length(series_odd) + 1) / 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47\n```\n:::\n:::\n\n\nThe number 47 is precisely in the middle of the series: there are two numbers below it, and two numbers above it.  \n\nIn the example above, the `length()` function returns the number of elements in the series and the `[]` are used to extract to extract the value found at a given position in the series (in this case, the median).\n\nIf there is an even number of elements in the series, then there will be *two* numbers in the middle of the series, so it's necessary to find the *mean* of these two middle values to calculate the median.  Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code generates 6 random integers between 1 and 100\nseries_even <- floor(runif(n = 6, min = 1, max = 100))\n\n# Sort the series\nseries_even <- sort(series_even)\n\n# Print the series\nseries_even\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  7 13 59 68 76\n```\n:::\n\n```{.r .cell-code}\n# Find the median for an even number of elements\nmean(series_even[(length(series_even) / 2) + 0:1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36\n```\n:::\n:::\n\n\nThe number 36 lies halfway between the middle two numbers in the series.\n\nThe code shown above is rather verbose.  Luckily, there is a much easier way to calculate the median in R - just use the `median()` function.  Let's check that our calculations above return the same results as those returned by the `median()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseries_odd[(length(series_odd) + 1) / 2] == median(series_odd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nmean(series_even[(length(series_even) / 2) + 0:1]) == median(series_even)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nThey do!  So using `median()` is a much simpler approach.  Generally, fewer lines of code makes for more robust code, so I'd definitely recommend using the `median()` function, especially since the way that the median is calculated can vary depending whether there is an odd or even number of elements in a series.\n\n## So, which is better?\n\nThe mean is probably the most commonly used measure of centre; however, there are times when it is better to use the median.  When there are extreme values (outliers) in the data, the mean tends to get pulled away from the 'centre' and toward those values.  The same applies if the data are skewed to the left or to the right (more about this in a future post).  In these cases, it is better to use the median.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}